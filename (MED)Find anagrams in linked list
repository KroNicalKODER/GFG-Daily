//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node {
    char data;
    struct Node *next;

    Node(char x) {
        data = x;
        next = NULL;
    }
};

void printList(Node *node) {
    while (node != NULL) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << endl;
}

struct Node *inputList() {
    int n; // length of link list
    scanf("%d ", &n);

    char data;
    cin >> data;
    struct Node *head = new Node(data);
    struct Node *tail = head;
    for (int i = 0; i < n - 1; ++i) {
        cin >> data;
        tail->next = new Node(data);
        tail = tail->next;
    }
    return head;
}


// } Driver Code Ends
/*

Definition for singly Link List Node
struct Node
{
    char data;
    Node* next;
    Node(int x) {  data = x;  next = NULL; }
};

You can also use the following for printing the link list.
printList(Node* node);
*/

class Solution {
  public:
    Node* placeEnd(struct Node* start,int len,map<char,int>& nmap){
        while(len--){
            if(start == NULL) return NULL;
            nmap[start->data]++;
            start=start->next;
        }
        return start;
    }
    vector<Node*> findAnagrams(struct Node* head, string s) {
        Node* start = head;
        map<char,int> nmap;
        map<char,int> smap;
        for(auto itr : s) smap[itr]++;
        int len = s.length();
        Node* end = placeEnd(start,len,nmap);

        vector<Node*> ans;
        vector<pair<Node*,Node*>> ansmap;
        while(end!=NULL && start!=NULL){
            if(nmap == smap){
                ansmap.push_back({start,end});
                start = end;
                nmap.clear();
                end = placeEnd(start,len,nmap);
                continue;
            }
            nmap[start->data]--;
            if(nmap[start->data]==0) nmap.erase(start->data);
            start = start->next;
            nmap[end->data]++;
            end = end->next;
        }
        if(nmap == smap){
            ansmap.push_back({start,end});
            start = end;
            nmap.clear();
            end = placeEnd(start,len,nmap);
        }
        for(auto itr : ansmap){
            Node* currStart = itr.first;
            Node* currEnd = itr.second;
            Node* tempHead = new Node(currStart->data);
            Node* curr = currStart->next;
            ans.push_back(tempHead);
            while(curr!=currEnd){
                    tempHead -> next = new Node(curr->data);
                    tempHead = tempHead->next;
                    curr = curr->next;
                }
                tempHead->next = NULL;
        }
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        struct Node *head = inputList();

        string s;
        cin >> s;

        Solution obj;
        vector<Node *> res = obj.findAnagrams(head, s);

        for (int i = 0; i < res.size(); i++) {
            printList(res[i]);
        }

        if (res.size() == 0) cout << "-1\n";
    }
}

// } Driver Code Ends
